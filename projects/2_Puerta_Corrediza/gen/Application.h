/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef APPLICATION_H_
#define APPLICATION_H_

#include "..\src\sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'application'.
*/

#ifndef APPLICATION_EVENTQUEUE_BUFFERSIZE
#define APPLICATION_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define APPLICATION_STATE_COUNT 10

/*! Define dimension of the state configuration vector for orthogonal states. */
#define APPLICATION_MAX_ORTHOGONAL_STATES 3

/*! Define maximum number of time events that can be active at once */
#define APPLICATION_MAX_PARALLEL_TIME_EVENTS 2

/*! Define indices of states in the StateConfVector */
#define SCVI_APPLICATION_BUTTONS_IDDLE 0
#define SCVI_APPLICATION_BUTTONS_ACTIVE 0
#define SCVI_APPLICATION_BUTTONS_ACTIVE__REGION0_DEBOUNCE 0
#define SCVI_APPLICATION_BUTTONS_ACTIVE__REGION0_PRESSED 0
#define SCVI_APPLICATION_MAIN_REGION_WAIT 1
#define SCVI_APPLICATION__REGION2_CLOSED 2
#define SCVI_APPLICATION__REGION2_OPEN 2
#define SCVI_APPLICATION__REGION2_IN_MOTION 2
#define SCVI_APPLICATION__REGION2_IN_MOTION__REGION0_OPENING 2
#define SCVI_APPLICATION__REGION2_IN_MOTION__REGION0_CLOSING 2



/*! Enumeration of all states */ 
typedef enum
{
	Application_last_state,
	Application_Buttons_IDDLE,
	Application_Buttons_ACTIVE,
	Application_Buttons_ACTIVE__region0_DEBOUNCE,
	Application_Buttons_ACTIVE__region0_PRESSED,
	Application_main_region_WAIT,
	Application__region2_CLOSED,
	Application__region2_OPEN,
	Application__region2_IN_MOTION,
	Application__region2_IN_MOTION__region0_OPENING,
	Application__region2_IN_MOTION__region0_CLOSING
} ApplicationStates;

/*! Type definition of the data structure for the ApplicationIface interface scope. */
typedef struct
{
	sc_boolean ev_button_press_raised;
	sc_integer ev_button_press_value;
	sc_boolean ev_button_release_raised;
	sc_boolean ev_button_OK_raised;
	sc_boolean ev_presence_raised;
} ApplicationIface;


/* Declaration of constants for scope ApplicationIface. */
extern const sc_boolean APPLICATION_APPLICATIONIFACE_LED_ON;
extern const sc_boolean APPLICATION_APPLICATIONIFACE_LED_OFF;
extern const sc_integer APPLICATION_APPLICATIONIFACE_LED0_R;
extern const sc_integer APPLICATION_APPLICATIONIFACE_LED0_G;
extern const sc_integer APPLICATION_APPLICATIONIFACE_LED0_B;
extern const sc_boolean APPLICATION_APPLICATIONIFACE_MOTOR_ON;
extern const sc_boolean APPLICATION_APPLICATIONIFACE_MOTOR_OFF;
extern const sc_boolean APPLICATION_APPLICATIONIFACE_OPENING;
extern const sc_boolean APPLICATION_APPLICATIONIFACE_CLOSING;
extern const sc_integer APPLICATION_APPLICATIONIFACE_TEC1;
extern const sc_integer APPLICATION_APPLICATIONIFACE_MIN_POS;
extern const sc_integer APPLICATION_APPLICATIONIFACE_MAX_POS;
extern const sc_integer APPLICATION_APPLICATIONIFACE_MAX_TIME_OPENED;


/*! Type definition of the data structure for the ApplicationInternal interface scope. */
typedef struct
{
	sc_integer count;
	sc_integer viTec;
	sc_integer pos;
	sc_integer time_opened;
} ApplicationInternal;



/*! Type definition of the data structure for the ApplicationTimeEvents interface scope. */
typedef struct
{
	sc_boolean application_Buttons_ACTIVE__region0_DEBOUNCE_tev0_raised;
	sc_boolean application__region2_OPEN_tev0_raised;
	sc_boolean application__region2_IN_MOTION__region0_OPENING_tev0_raised;
	sc_boolean application__region2_IN_MOTION__region0_CLOSING_tev0_raised;
} ApplicationTimeEvents;




/*! 
 * Type definition of the data structure for the Application state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	ApplicationStates stateConfVector[APPLICATION_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	ApplicationIface iface;
	ApplicationInternal internal;
	ApplicationTimeEvents timeEvents;
} Application;



/*! Initializes the Application state machine data structures. Must be called before first usage.*/
extern void application_init(Application* handle);

/*! Activates the state machine */
extern void application_enter(Application* handle);

/*! Deactivates the state machine */
extern void application_exit(Application* handle);

/*! Performs a 'run to completion' step. */
extern void application_runCycle(Application* handle);

/*! Raises a time event. */
extern void application_raiseTimeEvent(Application* handle, sc_eventid evid);

/*! Gets the value of the variable 'LED_ON' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_lED_ON(const Application* handle);
/*! Gets the value of the variable 'LED_OFF' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_lED_OFF(const Application* handle);
/*! Gets the value of the variable 'LED0_R' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_lED0_R(const Application* handle);
/*! Gets the value of the variable 'LED0_G' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_lED0_G(const Application* handle);
/*! Gets the value of the variable 'LED0_B' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_lED0_B(const Application* handle);
/*! Gets the value of the variable 'MOTOR_ON' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_mOTOR_ON(const Application* handle);
/*! Gets the value of the variable 'MOTOR_OFF' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_mOTOR_OFF(const Application* handle);
/*! Gets the value of the variable 'OPENING' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_oPENING(const Application* handle);
/*! Gets the value of the variable 'CLOSING' that is defined in the default interface scope. */ 
extern sc_boolean applicationIface_get_cLOSING(const Application* handle);
/*! Gets the value of the variable 'TEC1' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_tEC1(const Application* handle);
/*! Gets the value of the variable 'MIN_POS' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_mIN_POS(const Application* handle);
/*! Gets the value of the variable 'MAX_POS' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_mAX_POS(const Application* handle);
/*! Gets the value of the variable 'MAX_TIME_OPENED' that is defined in the default interface scope. */ 
extern sc_integer applicationIface_get_mAX_TIME_OPENED(const Application* handle);
/*! Raises the in event 'ev_button_press' that is defined in the default interface scope. */ 
extern void applicationIface_raise_ev_button_press(Application* handle, sc_integer value);

/*! Raises the in event 'ev_button_release' that is defined in the default interface scope. */ 
extern void applicationIface_raise_ev_button_release(Application* handle);

/*! Raises the in event 'ev_button_OK' that is defined in the default interface scope. */ 
extern void applicationIface_raise_ev_button_OK(Application* handle);

/*! Raises the in event 'ev_presence' that is defined in the default interface scope. */ 
extern void applicationIface_raise_ev_presence(Application* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean application_isActive(const Application* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean application_isFinal(const Application* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean application_isStateActive(const Application* handle, ApplicationStates state);


#ifdef __cplusplus
}
#endif 

#endif /* APPLICATION_H_ */
